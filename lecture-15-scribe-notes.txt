Simply typed λ-calculus:
(λ x  x)
Given type ℝ	         overall type ℝ
 (λ x    int-> ℝ      x)    Given type here is a function mapping int to ℝ
		         overall type (int -> ℝ)-> (int ->R)
Г : type environment
Ⱶ : it follows
b:t b is type t
->: implies
\{v,_} : remove v

1)	b:t ϵ Г                b is type t is an element of the type environment
Г Ⱶ b:t 	

2)	Г Ⱶ e1:t1 -> t2        Г Ⱶ e2:t2
Г Ⱶ e1 e2:t2

Forgetting about expressions and only looking at types.
1)	b:t ϵ Г 		type= logical statement (predicate calculas)
 	Г Ⱶ b:t	
2)	Г Ⱶ e1:t1 -> t2        Г Ⱶ e2:t2
Г Ⱶ e1 e2:t2

3)	(Г \{v,_}) U {v: t1} Ⱶ e1: t1
Г Ⱶ λ v : t1.e1  :t1 ->t2
Take axioms add new t1, conclude t2, from axioms conclude t1->t2
Types <-->  Theorems                 Programs <--> Proofs
There is a correspondence between these things

Concept: Showing t is typed well proves t.
Simply typed λ calc => predicate calculus
Weakness of ST λC
We need to give it ground types.
Compose= λ f. λ g .λ x . f(gx)                                    give: f (ℝ-> e)-> string
						         g int -> (ℝ-> ℝ)
						         x int
overall type: ((ℝ-> ℝ)->string)->(int (ℝ-> ℝ))->int->string
this is a hassle to do

Typed λ –calc has generic types
(λ x.x) -> ᴧ t (λ x.t ) t -> t               for all logical statements t       t-> t
Compose:  ∀t1 ∀ t2 ∀ t3     (t1 ->t2)->(t2->t3)->(t1->t3)

Combinator: term in λ calc with no free variables
	λ calc expression e st   if FV(e)=null element e is a combinatory.
The type of a combinator is a tautology.


λ f .λ x . F x : ∀ t1 Simply typed λ-calculus:
(λ x  x)
Given type ℝ	         overall type ℝ
 (λ x    int-> ℝ      x)    Given type here is a function mapping int to ℝ
		         overall type (int -> ℝ)-> (int ->R)
Г : type environment
Ⱶ : it follows
b:t b is type t
->: implies
\{v,_} : remove v

1)	b:t ϵ Г                b is type t is an element of the type environment
Г Ⱶ b:t 	

2)	Г Ⱶ e1:t1 -> t2        Г Ⱶ e2:t2
Г Ⱶ e1 e2:t2

Forgetting about expressions and only looking at types.
1)	b:t ϵ Г 		type= logical statement (predicate calculas)
 	Г Ⱶ b:t	
2)	Г Ⱶ e1:t1 -> t2        Г Ⱶ e2:t2
Г Ⱶ e1 e2:t2

3)	(Г \{v,_}) U {v: t1} Ⱶ e1: t1
Г Ⱶ λ v : t1.e1  :t1 ->t2
Take axioms add new t1, conclude t2, from axioms conclude t1->t2
Types <--> Theorems                 Programs <--> Proofs
There is a correspondence between these things

Concept: Showing t is typed well proves t.
Simply typed λ calc => predicate calculus
Weakness of ST λC
We need to give it ground types.
Compose= λ f. λ g .λ x . f(gx)                                    give: f (ℝ-> e)-> string
						         g int -> (ℝ-> ℝ)
						         x int
overall type: ((ℝ-> ℝ)->string)->(int (ℝ-> ℝ))->int->string
this is a hassle to do

Typed λ –calc has generic types
(λ x.x) --> ᴧ t (λ x.t ) t -> t               for all logical statements t       t-> t
Compose:  ∀t1 ∀ t2 ∀ t3     (t1 ->t2)->(t2->t3)->(t1->t3)

Combinator: term in λ calc with no free variables
	λ calc expression e st   if FV(e)=null element e is a combinatory.
The type of a combinator is a tautology.


λ f .λ x . F x : ∀ t1 ∀ t2 (t1--> t2) -> t1 ->t2


(t1 -> t2 -> t3)-> t2 ->(t1->t3)
λ f. λy .λ x . (f x y)
f=(t1->t2->t3) y=t2 x=t1  (f x y)=t3

Prolog=alien language
break up problems into bunch of true statements

ex Prolog Prog: 'database'
male(bob) ;male=predicate (bob)=true statement
female(sue)
male(dan)
parent(bob,sue)  bob is sue's parent
parent(dan,bob)
f(x,y):- male (x), parent(x,y) ; :- = if
grandparent(x,z):- parent(x,y), parent(y,z)

-------------------------------------------
'runtime'
?- male(X)    ?- prove statement true for some x
    X=bob;
    X=dan;
    no		closed world assumption: assume it knows everything about the world.

?- parent (X,bob) :is somebody bobs parent
    X=dan
    no

Prolog does order matter?yes
∀ x,∀y male(X): parent(X,Y)-> father(X,Y)

prolog has execution component which tries to prove things are true. Prolog can be caught easily in infinite loops if ordering is not correct.

ex of getting caught in loop using above:
Ancestor(X,Y):- parent(Z,Y), ancestor(X,Z) :inf loop as it always tries to determine if someone is an ancestor by checking another.
Ancestor(X,Y):- parent(X,Y) inserting above previous line means prolog will check this first and then the other ancestor line.

